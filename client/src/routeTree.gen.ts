/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterPropertyRouteImport } from './routes/register-property'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as PropertyPropertyIdRouteImport } from './routes/property/$propertyId'
import { Route as ExampleBoxRouteImport } from './routes/example/Box'
import { Route as EditPropertyPropertyIdRouteImport } from './routes/edit-property.$propertyId'
import { Route as DashboardMyPropertiesRouteImport } from './routes/dashboard/my-properties'
import { Route as PropertyPropertyIdEditRouteImport } from './routes/property/$propertyId/edit'

const RegisterPropertyRoute = RegisterPropertyRouteImport.update({
  id: '/register-property',
  path: '/register-property',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const PropertyPropertyIdRoute = PropertyPropertyIdRouteImport.update({
  id: '/property/$propertyId',
  path: '/property/$propertyId',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleBoxRoute = ExampleBoxRouteImport.update({
  id: '/example/Box',
  path: '/example/Box',
  getParentRoute: () => rootRouteImport,
} as any)
const EditPropertyPropertyIdRoute = EditPropertyPropertyIdRouteImport.update({
  id: '/edit-property/$propertyId',
  path: '/edit-property/$propertyId',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardMyPropertiesRoute = DashboardMyPropertiesRouteImport.update({
  id: '/my-properties',
  path: '/my-properties',
  getParentRoute: () => DashboardRoute,
} as any)
const PropertyPropertyIdEditRoute = PropertyPropertyIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => PropertyPropertyIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/register-property': typeof RegisterPropertyRoute
  '/dashboard/my-properties': typeof DashboardMyPropertiesRoute
  '/edit-property/$propertyId': typeof EditPropertyPropertyIdRoute
  '/example/Box': typeof ExampleBoxRoute
  '/property/$propertyId': typeof PropertyPropertyIdRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/property/$propertyId/edit': typeof PropertyPropertyIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/register-property': typeof RegisterPropertyRoute
  '/dashboard/my-properties': typeof DashboardMyPropertiesRoute
  '/edit-property/$propertyId': typeof EditPropertyPropertyIdRoute
  '/example/Box': typeof ExampleBoxRoute
  '/property/$propertyId': typeof PropertyPropertyIdRouteWithChildren
  '/dashboard': typeof DashboardIndexRoute
  '/property/$propertyId/edit': typeof PropertyPropertyIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/register-property': typeof RegisterPropertyRoute
  '/dashboard/my-properties': typeof DashboardMyPropertiesRoute
  '/edit-property/$propertyId': typeof EditPropertyPropertyIdRoute
  '/example/Box': typeof ExampleBoxRoute
  '/property/$propertyId': typeof PropertyPropertyIdRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/property/$propertyId/edit': typeof PropertyPropertyIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/register-property'
    | '/dashboard/my-properties'
    | '/edit-property/$propertyId'
    | '/example/Box'
    | '/property/$propertyId'
    | '/dashboard/'
    | '/property/$propertyId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/register-property'
    | '/dashboard/my-properties'
    | '/edit-property/$propertyId'
    | '/example/Box'
    | '/property/$propertyId'
    | '/dashboard'
    | '/property/$propertyId/edit'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/register-property'
    | '/dashboard/my-properties'
    | '/edit-property/$propertyId'
    | '/example/Box'
    | '/property/$propertyId'
    | '/dashboard/'
    | '/property/$propertyId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  RegisterPropertyRoute: typeof RegisterPropertyRoute
  EditPropertyPropertyIdRoute: typeof EditPropertyPropertyIdRoute
  ExampleBoxRoute: typeof ExampleBoxRoute
  PropertyPropertyIdRoute: typeof PropertyPropertyIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register-property': {
      id: '/register-property'
      path: '/register-property'
      fullPath: '/register-property'
      preLoaderRoute: typeof RegisterPropertyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/property/$propertyId': {
      id: '/property/$propertyId'
      path: '/property/$propertyId'
      fullPath: '/property/$propertyId'
      preLoaderRoute: typeof PropertyPropertyIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/Box': {
      id: '/example/Box'
      path: '/example/Box'
      fullPath: '/example/Box'
      preLoaderRoute: typeof ExampleBoxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit-property/$propertyId': {
      id: '/edit-property/$propertyId'
      path: '/edit-property/$propertyId'
      fullPath: '/edit-property/$propertyId'
      preLoaderRoute: typeof EditPropertyPropertyIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/my-properties': {
      id: '/dashboard/my-properties'
      path: '/my-properties'
      fullPath: '/dashboard/my-properties'
      preLoaderRoute: typeof DashboardMyPropertiesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/property/$propertyId/edit': {
      id: '/property/$propertyId/edit'
      path: '/edit'
      fullPath: '/property/$propertyId/edit'
      preLoaderRoute: typeof PropertyPropertyIdEditRouteImport
      parentRoute: typeof PropertyPropertyIdRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardMyPropertiesRoute: typeof DashboardMyPropertiesRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardMyPropertiesRoute: DashboardMyPropertiesRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface PropertyPropertyIdRouteChildren {
  PropertyPropertyIdEditRoute: typeof PropertyPropertyIdEditRoute
}

const PropertyPropertyIdRouteChildren: PropertyPropertyIdRouteChildren = {
  PropertyPropertyIdEditRoute: PropertyPropertyIdEditRoute,
}

const PropertyPropertyIdRouteWithChildren =
  PropertyPropertyIdRoute._addFileChildren(PropertyPropertyIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  RegisterPropertyRoute: RegisterPropertyRoute,
  EditPropertyPropertyIdRoute: EditPropertyPropertyIdRoute,
  ExampleBoxRoute: ExampleBoxRoute,
  PropertyPropertyIdRoute: PropertyPropertyIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
