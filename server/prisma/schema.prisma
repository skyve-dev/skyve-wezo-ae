generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// start of new enum

// Enums for clarity and data consistency based on MVP user stories

/// PropertyStatus reflects a property listing's visibility and bookability on the platform
/// Purpose: Controls whether properties appear in search results and can receive bookings
enum PropertyStatus {
  Draft /// Initial state - property is not yet live on the platform
  Live /// Property is active, visible for bookings, and appears in search results (aligns with property being "open and ready for bookings")
  Closed /// Property is temporarily/permanently unavailable (supports blocking dates for renovations or full occupancy)
}

/// RatePlanType defines types of rate plans, allowing partners to appeal to different traveler segments
/// Purpose: Enables property owners to offer different pricing strategies and cancellation policies
enum RatePlanType {
  FullyFlexible /// Offers guests flexibility for cancellations (typically at higher price) - guests can cancel free until certain days before arrival
  NonRefundable /// Secures guaranteed bookings and revenue (typically at lower price) - no refunds allowed
  Custom /// Allows unique rate plans for specific guest segments or special discounts
}

/// RestrictionType defines booking restrictions partners can apply to control received bookings
/// Purpose: Gives property owners granular control over booking patterns and guest behavior
enum RestrictionType {
  MinLengthOfStay /// Minimum number of nights required for a booking
  MaxLengthOfStay /// Maximum number of nights accepted for a booking
  NoArrivals /// Prevents guests from checking in on specific dates
  NoDepartures /// Prevents guests from checking out on specific dates
  MinAdvancedReservation /// Specifies minimum lead time required before arrival
  MaxAdvancedReservation /// Specifies maximum lead time allowed for advance bookings
}

/// ReservationStatus indicates the current state of a reservation in the booking lifecycle
/// Purpose: Tracks booking status from creation through completion for proper management
enum ReservationStatus {
  Confirmed /// Booking is confirmed and guest is expected
  Pending /// Booking awaits confirmation or payment
  Modified /// Booking details have been changed (supports reservation modification user story)
  Cancelled /// Booking cancelled by guest or partner
  NoShow /// Guest didn't arrive - reportable within 48 hours for commission waiver
  Completed /// Stay has concluded successfully
}

/// KyuStatus indicates the verification progress of the Know Your Partner (KYP) form
/// Purpose: Tracks compliance and identity verification status for regulatory requirements
enum KyuStatus {
  PendingSubmission /// Form not yet submitted
  Submitted /// Form submitted and awaiting review
  Verified /// Identity and business details successfully verified
  Rejected /// Submission rejected due to inconsistencies or missing information
}

/// KyuEntityType determines the type of entity for KYP form and required documents
/// Purpose: Differentiates between individual and business entities for appropriate verification
enum KyuEntityType {
  Individual /// Sole trader or individual property owner
  Business /// Partnership, corporation, or non-profit organization (requires different verification)
}

/// KyuDocumentType specifies types of documents required for KYP form verification
/// Purpose: Ensures proper identity and business verification through standardized documents
enum KyuDocumentType {
  GovernmentId /// Official ID with photo (passport, driver's license, etc.)
  ProofOfAddress /// Utility bill or bank statement (must be less than 6 months old)
  BusinessRegistration /// Official business registration document (required for business entities)
  Other /// Any other specific documents that may be required
}

/// SecurityReportType categorizes security incidents that partners might report
/// Purpose: Enables quick categorization and response to security threats
enum SecurityReportType {
  SuspiciousActivity /// General unusual behavior on the account
  SecurityBreach /// Suspected compromise of account or guest data
  PhishingAttempt /// Attempts to trick users into revealing sensitive information
  SocialEngineeringAttempt /// Manipulation tactics to gain unauthorized access
  FraudulentBooking /// Suspected non-genuine or fraudulent reservations
  Other /// Incidents not covered by specific categories
}

// end of new enum

/// UserRole defines the different types of users in the system
/// Purpose: Determines access levels and capabilities within the platform
enum UserRole {
  Tenant /// Guest/tenant who makes bookings
  HomeOwner /// Property owner who manages listings
  Manager /// Property manager with delegated access
}

/// User represents a Wezo.ae property partner or user who manages property listings
/// Purpose: Central user entity for authentication, property management, and platform interactions
model User {
  id                   String    @id @default(cuid()) /// Unique identifier for the user
  username             String    @unique /// Unique username for login authentication
  email                String    @unique /// Unique email address for communications and login
  firstName            String? /// Optional first name
  lastName             String? /// Optional last name
  password             String /// Hashed password for authentication
  role                 UserRole  @default(Tenant) /// User's role determining access levels (Tenant/HomeOwner/Manager)
  isAdmin              Boolean   @default(false) /// Boolean flag for administrator privileges
  passwordResetToken   String?   @unique /// Token for secure password reset process
  passwordResetExpires DateTime? /// Expiration time for password reset token
  createdAt            DateTime  @default(now()) /// Timestamp of account creation
  updatedAt            DateTime  @updatedAt /// Timestamp of last account update

  // Relations
  properties      Property[] /// Properties managed by this user (supports property command center access)
  bankDetails     HomeOwnerBankDetails? /// Bank details for receiving payments
  kyuForms        KyuForm[] /// Know Your User forms for regulatory compliance
  securityReports SecurityReport[] /// Security incident reports filed by this user
  invoices        Invoice[] /// Financial invoices from the platform
  messages        Message[]             @relation("PartnerMessages") /// Messages in the in-app inbox (guest communications and platform notifications)
  reviews         Review[] /// Reviews written by this user (when acting as guest)
  reservations    Reservation[] /// Reservations made by this user (when acting as guest)
  notifications   Notification[] /// Notifications received by this user
  supportTickets  SupportTicket[] /// Support tickets created by this user
}

/// BedType specifies the types of beds available in property rooms
/// Purpose: Provides detailed sleeping arrangement information for guests
enum BedType {
  TwinBed /// Single/twin size bed
  FullBed /// Full/double size bed
  QueenBed /// Queen size bed
  KingBed /// King size bed
  BunkBed /// Bunk bed (typically for children or budget accommodations)
  SofaBed /// Convertible sofa bed
  FutonBed /// Futon bed
}

/// RoomSpaceType categorizes different types of rooms/spaces within a property
/// Purpose: Helps guests understand property layout and available spaces
enum RoomSpaceType {
  Bedroom /// Sleeping room
  LivingRoom /// Common living area
  Kitchen /// Cooking area
  DiningRoom /// Dedicated dining space
  Other /// Any other type of space
}

/// ParkingType indicates parking availability and cost at the property
/// Purpose: Informs guests about parking options before booking
enum ParkingType {
  YesFree /// Free parking available
  YesPaid /// Paid parking available
  No /// No parking available
}

/// PetPolicy defines the property's stance on allowing pets
/// Purpose: Helps pet owners find suitable accommodations
enum PetPolicy {
  Yes /// Pets allowed
  No /// No pets allowed
  UponRequest /// Pets may be allowed with prior approval
}

/// BookingType determines how bookings are processed
/// Purpose: Gives property owners control over booking approval process
enum BookingType {
  BookInstantly /// Instant booking without owner approval
  NeedToRequestBook /// Requires owner approval before confirmation
}

/// PaymentType specifies available payment methods for bookings
/// Purpose: Provides payment flexibility for guests and owners
enum PaymentType {
  Online /// Online payment at time of booking
  ByCreditCardAtProperty /// Payment by credit card upon arrival
}

/// Currency defines supported currencies for pricing and transactions
/// Purpose: Standardizes monetary values across the platform
enum Currency {
  AED /// UAE Dirham (primary currency for UAE market)
}

/// PropertyGroup represents a collection of related properties (e.g., compound villas)
/// Purpose: Groups multiple properties under single management or location
model PropertyGroup {
  id         String     @id @default(uuid()) /// Unique identifier for the property group
  name       String /// Name of the property group/compound
  properties Property[] /// Properties belonging to this group
}

/// Property represents an individual listing on the platform
/// Purpose: Core entity containing all property details, policies, and relationships
model Property {
  propertyId String @id @default(uuid()) /// Unique identifier for the property

  // Basic Information
  name      String /// Property name/title
  addressId String  @unique /// Foreign key to address
  address   Address @relation(fields: [addressId], references: [id]) /// Physical location details

  // Property Grouping
  propertyGroupId String? /// Optional link to property group
  propertyGroup   PropertyGroup? @relation(fields: [propertyGroupId], references: [id]) /// Parent group if part of compound

  // Layout & Capacity
  rooms             Room[] /// Rooms/units within the property
  maximumGuest      Int /// Maximum occupancy
  bathrooms         Int /// Number of bathrooms
  allowChildren     Boolean /// Whether children are allowed
  offerCribs        Boolean /// Whether cribs are available
  propertySizeSqMtr Int? /// Optional property size in square meters

  // Facilities & Services  
  amenities      Amenity[] /// Available amenities (WiFi, pool, etc.)
  serveBreakfast Boolean /// Whether breakfast is served
  parking        ParkingType /// Parking availability and cost
  languages      String[] /// Languages spoken by staff

  // House Rules & Policies
  smokingAllowed         Boolean /// Smoking policy
  partiesOrEventsAllowed Boolean /// Events/parties policy
  petsAllowed            PetPolicy /// Pet policy
  checkInCheckout        CheckInOutTimes? /// Check-in/out time windows

  // Descriptions
  aboutTheProperty     String /// Property description (auto-generated on platform)
  aboutTheNeighborhood String /// Neighborhood/area description

  // Media
  photos Photo[] /// Property images (supports high-quality photo uploads)

  // Booking Configuration
  bookingType BookingType /// Instant booking or request-based
  paymentType PaymentType /// Online or at-property payment

  // Pricing & Policies
  pricing      Pricing? /// Base pricing information
  cancellation Cancellation? /// Cancellation policy details

  // Availability
  firstDateGuestCanCheckIn String /// Earliest possible check-in date

  // Timestamps
  createdAt DateTime @default(now()) /// Property creation timestamp
  updatedAt DateTime @updatedAt /// Last modification timestamp

  // Ownership
  ownerId String /// Foreign key to property owner
  owner   User   @relation(fields: [ownerId], references: [id]) /// Property owner relationship

  // Status & Requirements
  status            PropertyStatus @default(Draft) /// Current listing status (Draft/Live/Closed)
  minPhotosRequired Int            @default(5) /// Minimum photos required (platform recommendation)

  // Additional Policies
  reservationPolicy      String? /// Custom reservation policy text
  paymentPolicy          String? /// Custom payment policy text
  cancellationPolicyType RatePlanType? /// Default cancellation type for property
  houseRules             String? /// Additional house rules text

  // Relations for Property Management
  availability Availability[] /// Calendar availability (supports date blocking)
  ratePlans    RatePlan[] /// Multiple rate plans for different traveler segments
  restrictions Restriction[] /// Booking restrictions (min stay, etc.)
  reservations Reservation[] /// All bookings for this property
  reviews      Review[] /// Guest reviews and ratings
}

/// Address stores detailed location information for a property
/// Purpose: Provides complete address details for property location and search
model Address {
  id                     String    @id @default(uuid()) /// Unique identifier
  apartmentOrFloorNumber String? /// Optional apartment/floor number
  countryOrRegion        String /// Country or region name
  city                   String /// City name
  zipCode                Int /// Postal/ZIP code
  latLong                LatLong? /// Geographic coordinates
  property               Property? /// Associated property
}

/// LatLong stores geographic coordinates for an address
/// Purpose: Enables map display and location-based search functionality
model LatLong {
  id        String  @id @default(uuid()) /// Unique identifier
  latitude  Float /// Latitude coordinate
  longitude Float /// Longitude coordinate
  addressId String  @unique /// Foreign key to address
  address   Address @relation(fields: [addressId], references: [id]) /// Associated address
}

/// Room defines a specific room or unit within a property
/// Purpose: Provides detailed room configuration for guest understanding
model Room {
  id         String   @id @default(uuid()) /// Unique identifier
  spaceName  String /// Name/type of the space
  beds       Bed[] /// Beds available in this room
  propertyId String /// Foreign key to property
  property   Property @relation(fields: [propertyId], references: [propertyId]) /// Parent property
}

/// Bed describes sleeping arrangements within a room
/// Purpose: Provides detailed bed configuration for accurate occupancy planning
model Bed {
  id          String  @id @default(uuid()) /// Unique identifier
  typeOfBed   BedType /// Type of bed (Twin/Queen/King etc.)
  numberOfBed Int /// Quantity of this bed type
  roomId      String /// Foreign key to room
  room        Room    @relation(fields: [roomId], references: [id]) /// Parent room
}

/// CheckInOutTimes specifies check-in and check-out time windows for a property
/// Purpose: Sets clear expectations for arrival and departure times
model CheckInOutTimes {
  id            String   @id @default(uuid()) /// Unique identifier
  checkInFrom   String /// Earliest check-in time (e.g., "14:00")
  checkInUntil  String /// Latest check-in time (e.g., "22:00")
  checkOutFrom  String /// Earliest check-out time (e.g., "08:00")
  checkOutUntil String /// Latest check-out time (e.g., "12:00")
  propertyId    String   @unique /// Foreign key to property (one-to-one)
  property      Property @relation(fields: [propertyId], references: [propertyId]) /// Associated property
}

/// Photo stores information about property images
/// Purpose: Manages property photos for visual presentation to potential guests
model Photo {
  id          String    @id @default(uuid()) /// Unique identifier
  url         String /// URL to the photo file
  altText     String /// Alt text for accessibility
  description String? /// Optional photo description
  tags        String[] /// Tags for categorization
  propertyId  String? /// Foreign key to property
  isMain      Boolean   @default(false) /// Primary display photo flag
  property    Property? @relation(fields: [propertyId], references: [propertyId]) /// Associated property
  uploadedAt  DateTime  @default(now()) /// Upload timestamp
}

/// Amenity lists facilities and features available at a property
/// Purpose: Helps properties match traveler search criteria and expectations
model Amenity {
  id         String   @id @default(uuid()) /// Unique identifier
  name       String /// Amenity name (e.g., "Wi-Fi", "Pool")
  category   String /// Category for grouping (e.g., "Technology", "Recreation")
  propertyId String /// Foreign key to property
  property   Property @relation(fields: [propertyId], references: [propertyId]) /// Associated property
}

/// Pricing stores general pricing information for a property
/// Purpose: Defines base rates and discounts for different booking scenarios
model Pricing {
  id                                         String              @id @default(uuid()) /// Unique identifier
  currency                                   Currency /// Currency for all prices
  ratePerNight                               Float /// Standard nightly rate
  ratePerNightWeekend                        Float? /// Optional weekend rate
  promotion                                  Promotion? /// Active promotion if any
  pricePerGroupSize                          PricePerGroupSize[] /// Variable pricing by group size
  discountPercentageForNonRefundableRatePlan Float? /// Discount for non-refundable bookings
  discountPercentageForWeeklyRatePlan        Float? /// Discount for weekly stays
  propertyId                                 String              @unique /// Foreign key to property (one-to-one)
  property                                   Property            @relation(fields: [propertyId], references: [propertyId]) /// Associated property
}

/// Promotion defines special offers for a property
/// Purpose: Boosts visibility and bookings through targeted discounts
model Promotion {
  id          String  @id @default(uuid()) /// Unique identifier
  type        String /// Promotion type (e.g., "Early Booker", "Last Minute")
  percentage  Float /// Discount percentage
  description String /// Promotion description for guests
  pricingId   String  @unique /// Foreign key to pricing (one-to-one)
  pricing     Pricing @relation(fields: [pricingId], references: [id]) /// Associated pricing
}

/// PricePerGroupSize allows different rates based on number of guests
/// Purpose: Enables flexible pricing strategies for different group sizes
model PricePerGroupSize {
  id           String  @id @default(uuid()) /// Unique identifier
  groupSize    Int /// Number of guests
  ratePerNight Float /// Rate for this group size
  pricingId    String /// Foreign key to pricing
  pricing      Pricing @relation(fields: [pricingId], references: [id]) /// Associated pricing
}

/// Cancellation defines cancellation policies for a property
/// Purpose: Sets clear cancellation terms to manage guest expectations and owner revenue
model Cancellation {
  id                                     String   @id @default(uuid()) /// Unique identifier
  daysBeforeArrivalFreeToCancel          Int /// Days before arrival for free cancellation
  waiveCancellationFeeAccidentalBookings Boolean /// Whether to waive fees for accidental bookings
  propertyId                             String   @unique /// Foreign key to property (one-to-one)
  property                               Property @relation(fields: [propertyId], references: [propertyId]) /// Associated property
}

/// ADDITIONAL SCHEMA

/// Availability represents the availability of a property on a specific date
/// Purpose: Manages calendar availability and supports date blocking for various reasons
model Availability {
  id          String   @id @default(uuid()) /// Unique identifier
  propertyId  String /// Foreign key to property
  property    Property @relation(fields: [propertyId], references: [propertyId]) /// Associated property
  date        DateTime /// Specific date for this availability entry
  isAvailable Boolean  @default(true) /// True if available, false if blocked (renovations, full occupancy, etc.)
  createdAt   DateTime @default(now()) /// Creation timestamp
  updatedAt   DateTime @updatedAt /// Last update timestamp

  @@unique([propertyId, date]) /// Ensures one availability entry per property per date
}

/// RatePlan defines a rate plan with specific conditions and pricing options
/// Purpose: Enables partners to create multiple pricing strategies to appeal to different traveler segments
model RatePlan {
  id                 String       @id @default(uuid()) /// Unique identifier
  propertyId         String /// Foreign key to property
  property           Property     @relation(fields: [propertyId], references: [propertyId]) /// Associated property
  name               String /// Rate plan name (e.g., "Standard Rate", "Early Booker")
  type               RatePlanType /// Plan type (FullyFlexible/NonRefundable/Custom)
  description        String? /// Optional description for guests
  cancellationPolicy String /// Detailed cancellation terms
  includesBreakfast  Boolean      @default(false) /// Whether breakfast is included

  // Relations
  restrictions Restriction[] /// Specific booking restrictions for this plan
  prices       Price[] /// Daily prices for this rate plan
  reservations Reservation[] /// Bookings made under this rate plan

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

/// Price defines the price per night for a rate plan on a specific date
/// Purpose: Enables dynamic pricing adjustments based on demand, seasonality, and strategy
model Price {
  id         String   @id @default(uuid()) /// Unique identifier
  ratePlanId String /// Foreign key to rate plan
  ratePlan   RatePlan @relation(fields: [ratePlanId], references: [id]) /// Associated rate plan
  date       DateTime /// Date for which this price applies
  amount     Decimal  @db.Decimal(10, 2) /// Price per night (supports 2 decimal places)
  createdAt  DateTime @default(now()) /// Creation timestamp
  updatedAt  DateTime @updatedAt /// Last update timestamp

  @@unique([ratePlanId, date]) /// Ensures one price per rate plan per date
}

/// Restriction represents booking limitations applied to properties or rate plans
/// Purpose: Gives partners granular control over booking patterns and guest behavior
model Restriction {
  id         String          @id @default(uuid()) /// Unique identifier
  ratePlanId String? /// Optional: links to specific rate plan
  ratePlan   RatePlan?       @relation(fields: [ratePlanId], references: [id]) /// Associated rate plan if applicable
  propertyId String /// Always linked to a property
  property   Property        @relation(fields: [propertyId], references: [propertyId]) /// Associated property
  type       RestrictionType /// Type of restriction (MinLengthOfStay, NoArrivals, etc.)
  value      Int /// Numerical value (e.g., 3 for minimum 3 nights)
  startDate  DateTime? /// Optional: when restriction starts
  endDate    DateTime? /// Optional: when restriction ends
  createdAt  DateTime        @default(now()) /// Creation timestamp
  updatedAt  DateTime        @updatedAt /// Last update timestamp
}

/// Reservation represents a booking made by a guest for a property
/// Purpose: Core booking entity tracking all reservation details and lifecycle
model Reservation {
  id         String   @id @default(uuid()) /// Unique identifier
  propertyId String /// Foreign key to property
  property   Property @relation(fields: [propertyId], references: [propertyId]) /// Booked property
  ratePlanId String /// Foreign key to rate plan
  ratePlan   RatePlan @relation(fields: [ratePlanId], references: [id]) /// Selected rate plan
  guestId    String /// Foreign key to guest user
  guest      User     @relation(fields: [guestId], references: [id]) /// Guest making the booking

  // Booking Details
  checkInDate      DateTime /// Check-in date
  checkOutDate     DateTime /// Check-out date
  numGuests        Int /// Number of guests
  totalPrice       Decimal  @db.Decimal(10, 2) /// Total booking price
  commissionAmount Decimal? @db.Decimal(10, 2) /// Platform commission amount

  // Status Information
  status           ReservationStatus @default(Confirmed) /// Current reservation status
  paymentStatus    String? /// Payment status ("Paid", "Pending", "Failed")
  guestRequests    String? /// Special requests from guest
  isNoShowReported Boolean           @default(false) /// No-show flag (reportable within 48 hours)
  notes            String? /// Internal notes for property owner

  // Relations
  messages Message[] /// Related communications
  review   Review? /// Guest review if submitted

  createdAt DateTime @default(now()) /// Booking creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

/// Message represents communications between partners, guests, and the platform
/// Purpose: Enables in-app messaging for reservations, notifications, and guest communications
model Message {
  id            String       @id @default(uuid()) /// Unique identifier
  reservationId String? /// Optional link to related reservation
  reservation   Reservation? @relation(fields: [reservationId], references: [id]) /// Associated reservation if guest-related

  // Sender/Recipient Information
  senderId      String /// ID of sender (partner/guest/system)
  senderType    UserRole /// Type of sender
  recipientId   String /// ID of recipient (partner/guest/system)
  recipientType UserRole /// Type of recipient
  partner       User     @relation("PartnerMessages", fields: [recipientId], references: [id]) /// Associated partner

  // Message Content
  content String /// Message text content
  sentAt  DateTime @default(now()) /// Send timestamp
  isRead  Boolean  @default(false) /// Read status flag

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp

  // Note: For MVP, sender/recipient IDs are generic strings. In production,
  // these would be foreign keys to a unified User table
}

/// Review represents guest feedback for a property based on a completed stay
/// Purpose: Collects guest ratings and feedback, allows partner responses
model Review {
  id            String      @id @default(uuid()) /// Unique identifier
  guestId       String /// Foreign key to guest user
  guest         User        @relation(fields: [guestId], references: [id]) /// Guest who wrote the review
  propertyId    String /// Foreign key to property
  property      Property    @relation(fields: [propertyId], references: [propertyId]) /// Reviewed property
  reservationId String      @unique /// Foreign key to reservation (one review per booking)
  reservation   Reservation @relation(fields: [reservationId], references: [id]) /// Associated reservation

  // Review Content
  rating   Int /// Overall rating (1-10 scale)
  comment  String? /// Optional written feedback from guest
  response String? /// Partner's response to the review

  reviewedAt DateTime @default(now()) /// Review submission timestamp
  createdAt  DateTime @default(now()) /// Creation timestamp
  updatedAt  DateTime @updatedAt /// Last update timestamp
}

/// HomeOwnerBankDetails stores bank account information for property owner payments
/// Purpose: Enables secure payment processing and earnings transfers to property owners
model HomeOwnerBankDetails {
  id          String @id @default(uuid()) /// Unique identifier
  homeownerId String @unique /// Foreign key to user (one-to-one)
  homeowner   User   @relation(fields: [homeownerId], references: [id]) /// Property owner

  // Banking Information
  bankName          String /// Name of the bank
  accountNumber     String /// Account number (should be encrypted in production)
  accountHolderName String /// Name on the bank account
  sortCode          String? /// Sort code or routing number
  currency          String? /// Account currency (e.g., "AED", "USD")

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

/// Invoice represents financial invoices issued to property partners by the platform
/// Purpose: Tracks earnings, commissions, and payment obligations for financial management
model Invoice {
  id          String @id @default(uuid()) /// Unique identifier
  homeownerId String /// Foreign key to property owner
  homeowner   User   @relation(fields: [homeownerId], references: [id]) /// Property owner

  // Invoice Details
  invoiceNumber String   @unique /// Unique invoice number
  amount        Decimal  @db.Decimal(10, 2) /// Total invoice amount
  currency      String /// Invoice currency
  issueDate     DateTime /// Date invoice was issued
  dueDate       DateTime /// Payment due date
  paymentStatus String /// Status ("Paid", "Pending", "Overdue")
  description   String? /// Description of billed services
  pdfUrl        String? /// URL to downloadable PDF invoice

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

/// KyuForm represents the Know Your User (KYU) form for regulatory compliance
/// Purpose: Ensures identity and business verification for secure payment processing
model KyuForm {
  id          String @id @default(uuid()) /// Unique identifier
  homeownerId String /// Foreign key to property owner
  homeowner   User   @relation(fields: [homeownerId], references: [id]) /// Property owner

  // Form Status
  status     KyuStatus     @default(PendingSubmission) /// Current verification status
  entityType KyuEntityType /// Individual or Business entity type

  // Individual Entity Fields
  individualFullName           String? /// Full legal name for individuals
  individualDateOfBirth        DateTime? /// Date of birth for individuals
  individualResidentialAddress String? /// Residential address for individuals

  // Business Entity Fields
  businessLegalName          String? /// Legal business name
  businessRegisteredAddress  String? /// Registered business address
  businessRegistrationNumber String? /// Business registration number
  businessDateOfRegistration DateTime? /// Business registration date
  businessTaxIdNumber        String? /// Tax ID or VAT number

  // Additional Information
  ultimateBeneficialOwners Json? /// Ultimate beneficial owners (JSON for MVP)
  documents                KyuDocument[] /// Supporting documents

  // Processing Information
  submittedAt     DateTime? /// Form submission timestamp
  verifiedAt      DateTime? /// Verification completion timestamp
  rejectionReason String? /// Reason if rejected

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

/// KyuDocument represents uploaded documents for KYP form verification
/// Purpose: Stores and tracks required identity and business verification documents
model KyuDocument {
  id        String  @id @default(uuid()) /// Unique identifier
  kyuFormId String /// Foreign key to KYP form
  kyuForm   KyuForm @relation(fields: [kyuFormId], references: [id]) /// Associated KYP form

  // Document Information
  documentType KyuDocumentType /// Type of document (GovernmentId/ProofOfAddress/etc.)
  fileUrl      String /// Secure URL to stored document
  fileName     String? /// Original filename

  uploadedAt DateTime @default(now()) /// Upload timestamp
  createdAt  DateTime @default(now()) /// Creation timestamp
  updatedAt  DateTime @updatedAt /// Last update timestamp

  // Note: Application logic enforces rules like 'proof of address not older than 6 months'
}

/// SecurityReport represents security incidents reported by property partners
/// Purpose: Enables quick reporting and tracking of security breaches or suspicious activities
model SecurityReport {
  id          String @id @default(uuid()) /// Unique identifier
  homeownerId String /// Foreign key to property owner
  homeowner   User   @relation(fields: [homeownerId], references: [id]) /// Reporting partner

  // Report Details
  type        SecurityReportType /// Type of security incident
  description String /// Detailed incident description
  reportedAt  DateTime           @default(now()) /// Report submission timestamp
  status      String             @default("OPEN") /// Report status ("OPEN", "INVESTIGATING", "RESOLVED")

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

/// Notification represents system notifications sent to users
/// Purpose: Manages push notifications, reservation alerts, and system messages
model Notification {
  id     String @id @default(uuid()) /// Unique identifier
  userId String /// Foreign key to user
  user   User   @relation(fields: [userId], references: [id]) /// Notification recipient

  // Notification Details
  type        NotificationType /// Type of notification
  title       String /// Notification title
  message     String /// Notification content
  data        Json? /// Additional structured data
  isRead      Boolean @default(false) /// Read status
  isOfficial  Boolean @default(false) /// Whether from Wezo.ae official

  // Timestamps
  scheduledAt DateTime? /// When to send (for scheduled notifications)
  sentAt      DateTime? /// When actually sent
  readAt      DateTime? /// When marked as read
  createdAt   DateTime  @default(now()) /// Creation timestamp
  updatedAt   DateTime  @updatedAt /// Last update timestamp
}

/// SupportTicket represents support requests from users
/// Purpose: Manages customer support tickets and communications
model SupportTicket {
  id     String @id @default(uuid()) /// Unique identifier
  userId String /// Foreign key to user
  user   User   @relation(fields: [userId], references: [id]) /// Ticket creator

  // Ticket Details
  subject     String /// Ticket subject
  description String /// Initial problem description
  category    SupportCategory /// Support category
  priority    SupportPriority @default(Medium) /// Ticket priority
  status      SupportStatus   @default(Open) /// Current status

  // Assignment and Resolution
  assignedTo   String? /// Assigned support agent ID
  resolvedAt   DateTime? /// Resolution timestamp
  resolution   String? /// Resolution description
  satisfaction Int? /// User satisfaction rating (1-5)

  // Additional Data
  attachments Json? /// File attachments (URLs and metadata)
  metadata    Json? /// Additional context data

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp

  // Related Messages
  messages SupportMessage[]
}

/// SupportMessage represents messages within a support ticket
/// Purpose: Tracks conversation history in support tickets
model SupportMessage {
  id       String        @id @default(uuid()) /// Unique identifier
  ticketId String /// Foreign key to support ticket
  ticket   SupportTicket @relation(fields: [ticketId], references: [id]) /// Parent ticket

  // Message Details
  senderId   String /// ID of message sender
  senderType SenderType /// Whether user or support agent
  content    String /// Message content
  isInternal Boolean @default(false) /// Internal note (not visible to user)

  // Attachments
  attachments Json? /// File attachments (URLs and metadata)

  sentAt    DateTime @default(now()) /// Send timestamp
  createdAt DateTime @default(now()) /// Creation timestamp
}

/// FAQ represents frequently asked questions
/// Purpose: Stores knowledge base content for partner support
model FAQ {
  id String @id @default(uuid()) /// Unique identifier

  // Content
  question    String /// FAQ question
  answer      String /// FAQ answer
  category    String /// FAQ category
  tags        String[] /// Search tags
  isPublished Boolean @default(true) /// Publication status

  // Metrics
  viewCount  Int @default(0) /// Number of views
  helpCount  Int @default(0) /// Number of "helpful" votes
  orderIndex Int @default(0) /// Display order within category

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

/// Guide represents step-by-step guides for partners
/// Purpose: Stores educational content and how-to guides
model Guide {
  id String @id @default(uuid()) /// Unique identifier

  // Content
  title       String /// Guide title
  description String? /// Guide description
  content     String /// Guide content (markdown)
  category    String /// Guide category
  tags        String[] /// Search tags
  isPublished Boolean @default(true) /// Publication status

  // Metrics
  viewCount  Int @default(0) /// Number of views
  likeCount  Int @default(0) /// Number of likes
  orderIndex Int @default(0) /// Display order within category

  // Media
  thumbnailUrl String? /// Guide thumbnail image
  videoUrl     String? /// Optional video content

  createdAt DateTime @default(now()) /// Creation timestamp
  updatedAt DateTime @updatedAt /// Last update timestamp
}

// Enums for new models
enum NotificationType {
  ReservationConfirmed /// New reservation confirmed
  ReservationCancelled /// Reservation cancelled
  ReservationModified  /// Reservation modified
  PaymentReceived      /// Payment received
  ReviewReceived       /// New review received
  PropertyApproved     /// Property listing approved
  PropertyRejected     /// Property listing rejected
  SystemMaintenance    /// System maintenance notice
  SecurityAlert        /// Security-related alert
  PromotionalOffer     /// Marketing/promotional content
  PolicyUpdate         /// Platform policy updates
  Other               /// Other notifications
}

enum SupportCategory {
  Technical           /// Technical issues
  Billing            /// Billing and payments
  PropertyManagement /// Property management help
  BookingIssues      /// Reservation problems
  AccountAccess      /// Login/account issues
  PolicyQuestions    /// Platform policy questions
  FeatureRequest     /// Feature requests
  BugReport          /// Bug reports
  General            /// General inquiries
  Other              /// Other categories
}

enum SupportPriority {
  Low    /// Low priority
  Medium /// Medium priority
  High   /// High priority
  Urgent /// Urgent issues
}

enum SupportStatus {
  Open        /// Newly created ticket
  InProgress  /// Being worked on
  Waiting     /// Waiting for user response
  Resolved    /// Issue resolved
  Closed      /// Ticket closed
}

enum SenderType {
  User    /// Message from user
  Support /// Message from support agent
  System  /// Automated system message
}
