Enums for Clarity and Data Consistency
Enums are used throughout the schema to provide clear, consistent, and predefined options for various statuses and types, ensuring data integrity.
• PropertyStatus
    ◦ Purpose: Reflects a property listing's visibility and bookability on the platform.
    ◦ Values:
        ▪ Draft: The initial state; the property is not yet live.
        ▪ Live: The property is active and visible for bookings. This aligns with the need for a property to be "open and ready for bookings" to be visible in search results.
        ▪ Closed: The property is temporarily or permanently unavailable for bookings. This supports the user story for partners to block specific dates on their calendar, for instance, due to renovations or full occupancy.
• RatePlanType
    ◦ Purpose: Defines types of rate plans, allowing partners to appeal to different traveler segments.
    ◦ Values:
        ▪ FullyFlexible: Offers guests flexibility for cancellations, typically at a higher price. This corresponds to user stories allowing partners to create and manage standard rate plans like "fully flexible" options, where guests can cancel free of charge until a certain number of days before arrival.
        ▪ NonRefundable: Secures guaranteed bookings and revenue, typically at a lower price. This also supports creating "non-refundable" rate plans that secure guaranteed bookings and revenue, often at a lower price.
        ▪ Custom: Allows for unique rate plans based on specific needs. Partners can create custom rate plans to appeal to specific guest segments or offer specific discounts.
• RestrictionType
    ◦ Purpose: Defines types of booking restrictions that partners can apply to control received bookings.
    ◦ Values:
        ▪ MinLengthOfStay: Minimum number of nights required for a booking. This supports the ability to set basic restrictions like minimum length of stay to control booking types.
        ▪ MaxLengthOfStay: Maximum number of nights accepted for a booking.
        ▪ NoArrivals: Prevents guests from checking in on specific dates. This allows partners to prevent check-ins on specific dates.
        ▪ NoDepartures: Prevents guests from checking out on specific dates. This allows partners to prevent check-outs on specific dates.
        ▪ MinAdvancedReservation: Specifies the minimum lead time required for a reservation.
        ▪ MaxAdvancedReservation: Specifies the maximum lead time allowed for a reservation.
• ReservationStatus
    ◦ Purpose: Indicates the current state of a reservation in the booking lifecycle.
    ◦ Values:
        ▪ Confirmed: Booking is confirmed.
        ▪ Pending: Booking is awaiting confirmation or payment.
        ▪ Modified: Booking details have been changed. This directly supports the user story for partners to make changes to reservations.
        ▪ Cancelled: Booking has been cancelled by guest or partner.
        ▪ NoShow: Guest did not arrive for the reservation; reportable for commission waiver. This supports the ability to report no-shows within 48 hours for commission fee waivers.
        ▪ Completed: Stay has concluded.
• KypStatus
    ◦ Purpose: Indicates the verification progress of the Know Your Partner (KYP) form.
    ◦ Values:
        ▪ PendingSubmission: Form has not yet been submitted.
        ▪ Submitted: Form has been submitted and is awaiting review.
        ▪ Verified: Identity and business details have been successfully verified.
        ▪ Rejected: Submission was rejected due to inconsistencies or missing information.
• KypEntityType
    ◦ Purpose: Type of entity for the KYP form, determining required documents and information.
    ◦ Values:
        ▪ Individual: Represents a sole trader or individual owner.
        ▪ Business: Represents a partnership, corporation, or non-profit organization. These types of entities require different information for the KYP form.
• KypDocumentType
    ◦ Purpose: Types of documents required for the KYP form.
    ◦ Values:
        ▪ GovermentId: Official identification document with a picture. This is a required document for identity verification for the KYP form.
        ▪ ProofOfAddress: Document like a utility bill or bank statement, typically not older than 6 months. This is another required document for KYP, which must not be older than 6 months.
        ▪ BusinessRegistration: Official document proving business registration. Required for business entities in the KYP process.
        ▪ Other: Category for any other specific documents required.
• SecurityReportType
    ◦ Purpose: Types of security incidents a partner might report.
    ◦ Values:
        ▪ SuspiciousActivity: General report of unusual behavior on the account. This supports the user story to report any suspected security breaches or suspicious activity immediately.
        ▪ SecurityBreach: Suspected compromise of the account or guest data.
        ▪ PhishingAttempt: Attempt to trick users into revealing sensitive information.
        ▪ SocialEngineeringAttempt: Manipulation to gain access to data or accounts.
        ▪ FraudulentBooking: Suspected non-genuine reservations. Partners can report fraudulent bookings.
        ▪ Other: For incidents not covered by specific types.
• Other Enums:
    ◦ UserRole: Defines roles for users (Tenant, HomeOwner, Manager).
    ◦ BedType: Types of beds (TwinBed, FullBed, QueenBed, KingBed, BunkBed, SofaBed, FutonBed).
    ◦ RoomSpaceType: Types of rooms/spaces within a property (Bedroom, LivingRoom, Kitchen, DiningRoom, Other).
    ◦ ParkingType: Parking availability options (YesFree, YesPaid, No).
    ◦ PetPolicy: Pet allowance options (Yes, No, UponRequest).
    ◦ BookingType: How bookings are processed (BookInstantly, NeedToRequestBook).
    ◦ PaymentType: Payment methods (Online, ByCreditCardAtProperty).
    ◦ Currency: Supported currency (e.g., AED).
--------------------------------------------------------------------------------
Models (Tables) Documentation
Models define the structure of data stored in the database, representing different entities within the Booking.com partner app.
• User
    ◦ Purpose: Represents a Booking.com property partner or user, who manages property listings.
    ◦ Attributes:
        ▪ id: Unique identifier for the user.
        ▪ username: Unique username for login.
        ▪ email: Unique email address for the user.
        ▪ firstName, lastName: Optional first and last names.
        ▪ password: Hashed password for user authentication.
        ▪ role: User's role (e.g., Tenant, HomeOwner, Manager).
        ▪ isAdmin: Boolean flag indicating administrator privileges.
        ▪ passwordResetToken, passwordResetExpires: Fields for password reset functionality.
        ▪ createdAt, updatedAt: Timestamps for record creation and last update.
        ▪ properties: Relation to Property model, linking users to the properties they manage. This supports the user story for a partner to access their property's command center to manage their listing.
        ▪ bankDetails: Relation to HomeOwnerBankDetails, linking the user to their bank details for payments. This supports the user story to add or update bank details.
        ▪ kypForms: Relation to KypForm, linking the user to their Know Your Partner (KYP) forms for compliance. This supports the user story to complete the Know Your Partner (KYP) form for identity and business verification.
        ▪ securityReports: Relation to SecurityReport, enabling the user to report security breaches or suspicious activity. This supports the user story to report any suspected security breaches or suspicious activity immediately.
        ▪ invoices: Relation to Invoice, representing financial invoices from Booking.com for the user. This supports the user story to settle invoices and view reservation statements.
        ▪ messages: Relation to Message, for messages sent or received by the partner. This supports receiving messages from Booking.com and communicating directly with guests through an in-app inbox.
        ▪ reviews: Relation to Review, allowing users (guests) to leave reviews.
        ▪ reservations: Relation to Reservation, allowing users (guests) to make reservations.
• PropertyGroup
    ◦ Purpose: Represents a new model for a group of properties (e.g., a compound villa).
    ◦ Attributes:
        ▪ id: Unique identifier for the property group.
        ▪ name: Name of the property group.
        ▪ properties: Relation to Property model, linking properties to this group.
• Property
    ◦ Purpose: The main property model, representing an individual listing on the platform.
    ◦ Attributes:
        ▪ propertyId: Unique identifier for the property.
        ▪ name: Name of the property.
        ▪ addressId: Foreign key to Address.
        ▪ address: Relation to Address model.
        ▪ propertyGroupId: Optional foreign key to PropertyGroup.
        ▪ propertyGroup: Relation to PropertyGroup.
        ▪ rooms: Relation to Room model, detailing the rooms within the property.
        ▪ maximumGuest: Maximum number of guests the property can accommodate.
        ▪ bathrooms: Number of bathrooms in the property.
        ▪ allowChildren, offerCribs: Booleans indicating if children are allowed and cribs are offered.
        ▪ propertySizeSqMtr: Optional size of the property in square meters.
        ▪ amenities: Relation to Amenity model, for facilities offered. This supports the user story to highlight specific facilities like Wi-Fi.
        ▪ serveBreakfast: Boolean indicating if breakfast is served.
        ▪ parking: ParkingType enum for parking availability.
        ▪ languages: Array of strings for languages spoken by staff.
        ▪ smokingAllowed, partiesOrEventsAllowed, petsAllowed: Policy booleans and PetPolicy enum.
        ▪ checkInCheckout: Relation to CheckInOutTimes model for policy times.
        ▪ aboutTheProperty, aboutTheNeighborhood: Text descriptions of the property and its surroundings. These details are used by Booking.com to automatically generate descriptions.
        ▪ photos: Relation to Photo model, for property images. This supports the user story to upload a variety of high-quality photos.
        ▪ bookingType: BookingType enum (e.g., BookInstantly).
        ▪ paymentType: PaymentType enum (e.g., Online).
        ▪ pricing: Relation to Pricing model for pricing details.
        ▪ cancellation: Relation to Cancellation model for cancellation policies.
        ▪ firstDateGuestCanCheckIn: Date guests can first check in.
        ▪ createdAt, updatedAt: Timestamps.
        ▪ ownerId: Foreign key to User (owner).
        ▪ owner: Relation to User model, linking the property to its owner.
        ▪ status: PropertyStatus enum, indicating the current status of the listing.
        ▪ minPhotosRequired: Rule specifying the minimum number of photos required, defaulting to 5. This aligns with the rule of thumb to have at least five photos.
        ▪ reservationPolicy, paymentPolicy, cancellationPolicyType, houseRules: Strings for various property policies. This supports the user story to define and adjust property's policies regarding reservations, payments, cancellations, and house rules.
        ▪ availability: Relation to Availability model, for calendar availability. This directly supports the user story to set and update property's availability on a calendar.
        ▪ ratePlans: Relation to RatePlan model, for pricing and condition plans. This supports the user story to create and manage standard rate plans.
        ▪ restrictions: Relation to Restriction model, for property-wide booking restrictions. This supports the user story to set basic restrictions.
        ▪ reservations: Relation to Reservation model, for all bookings made for this property. This supports the user story to view a complete overview of all reservations.
        ▪ reviews: Relation to Review model, for guest reviews. This supports the user stories to view and manage all guest reviews and to respond to guest reviews.
• Address
    ◦ Purpose: Stores detailed address information for a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ apartmentOrFloorNumber, countryOrRegion, city, zipCode: Address components.
        ▪ latLong: Relation to LatLong model.
        ▪ property: Relation to Property model.
• LatLong
    ◦ Purpose: Stores latitude and longitude coordinates for an address.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ latitude, longitude: Floating point values for geographical coordinates.
        ▪ addressId: Foreign key to Address.
        ▪ address: Relation to Address model.
• Room
    ◦ Purpose: Defines a specific room or unit within a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ spaceName: Name or type of the space.
        ▪ beds: Relation to Bed model, detailing beds within the room.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model.
• Bed
    ◦ Purpose: Describes a bed within a room.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ typeOfBed: BedType enum (e.g., TwinBed).
        ▪ numberOfBed: Quantity of this bed type.
        ▪ roomId: Foreign key to Room.
        ▪ room: Relation to Room model.
• CheckInOutTimes
    ◦ Purpose: Specifies check-in and check-out times for a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ checkInFrom, checkInUntil, checkOutFrom, checkOutUntil: Time strings for check-in/out windows.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model.
• Photo
    ◦ Purpose: Stores information about photos uploaded for a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ url: URL to the photo file.
        ▪ altText: Alt text for accessibility.
        ▪ description: Optional description.
        ▪ tags: Array of strings for photo tags.
        ▪ propertyId: Optional foreign key to Property.
        ▪ isMain: Boolean indicating if it's the primary display photo.
        ▪ property: Relation to Property model.
        ▪ uploadedAt: Timestamp of upload. This supports the user story to upload a variety of high-quality photos for the property.
• Amenity
    ◦ Purpose: Lists amenities available at a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ name: Name of the amenity (e.g., "Wi-Fi").
        ▪ category: Category of the amenity.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model. This supports the user story to highlight specific facilities like Wi-Fi so the property matches traveler search criteria.
• Pricing
    ◦ Purpose: Stores general pricing information for a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ currency: Currency enum.
        ▪ ratePerNight: Standard rate per night.
        ▪ ratePerNightWeekend: Optional weekend rate.
        ▪ promotion: Relation to Promotion model.
        ▪ pricePerGroupSize: Relation to PricePerGroupSize model.
        ▪ discountPercentageForNonRefundableRatePlan, discountPercentageForWeeklyRatePlan: Discount percentages.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model.
• Promotion
    ◦ Purpose: Defines a specific promotion offered by a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ type: Type of promotion (e.g., "Early Booker").
        ▪ percentage: Discount percentage.
        ▪ description: Description of the promotion.
        ▪ pricingId: Foreign key to Pricing.
        ▪ pricing: Relation to Pricing model. This model supports the concept of promotions, which can boost visibility and bookings.
• PricePerGroupSize
    ◦ Purpose: Allows for setting different rates based on the number of guests.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ groupSize: Number of guests.
        ▪ ratePerNight: Rate for that group size.
        ▪ pricingId: Foreign key to Pricing.
        ▪ pricing: Relation to Pricing model.
• Cancellation
    ◦ Purpose: Defines cancellation policies for a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ daysBeforeArrivalFreeToCancel: Number of days before arrival for free cancellation.
        ▪ waiveCancellationFeeAccidentalBookings: Boolean for waiving fees for accidental bookings.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model. This supports the user story to define and adjust property's policies regarding cancellations.
• Availability
    ◦ Purpose: Represents the availability of a specific property's rooms/units on a given date.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model.
        ▪ date: The specific date for this availability entry.
        ▪ isAvailable: Boolean, true if available, false if blocked. This attribute is crucial for setting and updating property availability on a calendar and for blocking specific dates (e.g., for renovations or full occupancy).
        ▪ createdAt, updatedAt: Timestamps.
        ▪ @@unique([propertyId, date]): Ensures a unique availability entry per property per date.
• RatePlan
    ◦ Purpose: Defines a rate plan with specific conditions and pricing options for a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model.
        ▪ name: Name of the rate plan (e.g., "Standard Rate", "Early Booker").
        ▪ type: RatePlanType enum (e.g., Fully Flexible, Non-Refundable). This directly supports the user story to create and manage standard rate plans to appeal to different types of travelers.
        ▪ description: Optional description of the rate plan.
        ▪ cancellationPolicy: Detailed description of the cancellation terms.
        ▪ includesBreakfast: Boolean indicating if breakfast is included.
        ▪ restrictions: Relation to Restriction model, linking specific restrictions to this rate plan.
        ▪ prices: Relation to Price model, defining prices for this rate plan.
        ▪ reservations: Relation to Reservation model, for reservations made under this rate plan.
        ▪ createdAt, updatedAt: Timestamps.
• Price
    ◦ Purpose: Defines the price per night for a specific rate plan on a particular date.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ ratePlanId: Foreign key to RatePlan.
        ▪ ratePlan: Relation to RatePlan model.
        ▪ date: The date to which this price applies.
        ▪ amount: Decimal value for the price per night. This directly supports the user story to set and modify the price per night for each rate plan, room, or unit.
        ▪ createdAt, updatedAt: Timestamps.
        ▪ @@unique([ratePlanId, date]): Ensures a unique price for a rate plan and date.
• Restriction
    ◦ Purpose: Represents a restriction applied to bookings, either property-wide or per rate plan.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ ratePlanId: Optional foreign key to RatePlan if the restriction applies to a specific rate plan.
        ▪ ratePlan: Relation to RatePlan model.
        ▪ propertyId: Foreign key to Property, linking it to a property.
        ▪ property: Relation to Property model.
        ▪ type: RestrictionType enum (e.g., MIN_LENGTH_OF_STAY). This directly supports the user story to set basic restrictions like minimum length of stay to control the types of bookings received.
        ▪ value: Numerical value for the restriction (e.g., 3 for 3 nights).
        ▪ startDate, endDate: Optional dates for the restriction's validity.
        ▪ createdAt, updatedAt: Timestamps.
• Reservation
    ◦ Purpose: Represents a booking made by a guest for a property.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model.
        ▪ ratePlanId: Foreign key to RatePlan.
        ▪ ratePlan: Relation to RatePlan model.
        ▪ guestId: Foreign key to User (the guest).
        ▪ guest: Relation to User model.
        ▪ checkInDate, checkOutDate: Dates for the stay.
        ▪ numGuests: Number of guests in the reservation.
        ▪ totalPrice: Total price of the stay.
        ▪ commissionAmount: Optional commission due to Booking.com. These fields are part of the complete overview of all reservations a partner wants to view.
        ▪ status: ReservationStatus enum, indicating current status (e.g., Confirmed, Modified, NoShow). This supports making changes to reservations and reporting no-shows.
        ▪ paymentStatus: String for payment status (e.g., "Paid", "Pending").
        ▪ guestRequests: Any special requests made by the guest. These requests are part of the reservation overview.
        ▪ isNoShowReported: Boolean flag if a no-show has been reported. This directly supports the user story to report no-shows within 48 hours.
        ▪ notes: Internal notes for the property partner.
        ▪ messages: Relation to Message model, for communication related to this reservation.
        ▪ review: Optional Relation to Review model, linking to the guest review for this reservation.
        ▪ createdAt, updatedAt: Timestamps.
• Message
    ◦ Purpose: Represents a message sent or received by a partner, including communication with guests and Booking.com.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ reservationId: Optional foreign key to Reservation if the message is guest-related.
        ▪ reservation: Optional Relation to Reservation model.
        ▪ senderId, recipientId: IDs of sender/recipient (Partner, Guest, System).
        ▪ senderType, recipientType: UserRole enums for sender/recipient types.
        ▪ partner: Relation to User model, assuming the recipient is always a partner or messages are associated with a partner.
        ▪ content: The message content.
        ▪ sentAt: Timestamp when the message was sent.
        ▪ isRead: Boolean indicating if the message has been read.
        ▪ createdAt, updatedAt: Timestamps. This model is critical for the user stories to receive notifications about upcoming reservations and to communicate directly with guests through an in-app inbox. It also supports receiving messages from Booking.com directly in the app inbox.
• Review
    ◦ Purpose: Represents a guest review for a property based on a specific reservation.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ guestId: Foreign key to User (the guest).
        ▪ guest: Relation to User model.
        ▪ propertyId: Foreign key to Property.
        ▪ property: Relation to Property model.
        ▪ reservationId: Unique foreign key to Reservation (a review is tied to a specific unique reservation).
        ▪ reservation: Relation to Reservation model.
        ▪ rating: Guest's overall rating on a scale of 1-10.
        ▪ comment: Optional written feedback from the guest.
        ▪ response: Partner's reply to the review. These attributes fully support the user stories to view and manage all guest reviews and to respond to guest reviews (both positive and negative).
        ▪ reviewedAt: Timestamp when the review was submitted.
        ▪ createdAt, updatedAt: Timestamps.
• HomeOwnerBankDetails
    ◦ Purpose: Stores the bank details of a property owner for receiving payments.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ homeownerId: Unique foreign key to User (one set of bank details per partner).
        ▪ homeowner: Relation to User model.
        ▪ bankName, accountNumber, accountHolderName, sortCode, currency: Bank details (account number would be encrypted in production). This directly supports the user story to add or update bank details for secure payments.
        ▪ createdAt, updatedAt: Timestamps.
• Invoice
    ◦ Purpose: Represents an invoice issued to the property partner by Booking.com.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ homeownerId: Foreign key to User (the homeowner).
        ▪ homeowner: Relation to User model.
        ▪ invoiceNumber: Unique identifier for each invoice.
        ▪ amount, currency, issueDate, dueDate, paymentStatus: Financial details of the invoice.
        ▪ description: Optional description of services billed.
        ▪ pdfUrl: Optional URL to a downloadable PDF of the invoice.
        ▪ createdAt, updatedAt: Timestamps. This model supports the user stories to monitor earnings and to settle invoices and view reservation statements.
• KypForm
    ◦ Purpose: Represents the Know Your Partner (KYP) form, essential for regulatory compliance and secure payment processing.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ homeownerId: Foreign key to User (the homeowner).
        ▪ homeowner: Relation to User model.
        ▪ status: KypStatus enum, indicating current status of the form.
        ▪ entityType: KypEntityType enum, whether the partner is an individual or a business entity.
        ▪ individualFullName, individualDateOfBirth, individualResidentialAddress: Fields for individual entities.
        ▪ businessLegalName, businessRegisteredAddress, businessRegistrationNumber, businessDateOfRegistration, businessTaxIdNumber: Fields for business entities. These fields allow for collecting the necessary identity and business details for verification.
        ▪ ultimateBeneficialOwners: JSON field for ultimate beneficial owners info (simplified for MVP).
        ▪ documents: Relation to KypDocument model, for uploaded documents.
        ▪ submittedAt, verifiedAt: Timestamps for submission and verification.
        ▪ rejectionReason: Optional reason if the form was rejected.
        ▪ createdAt, updatedAt: Timestamps. This model comprehensively supports the user story to complete the Know Your Partner (KYP) form.
• KypDocument
    ◦ Purpose: Represents a document uploaded as part of the KYP form submission.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ kypFormId: Foreign key to KypForm.
        ▪ kypForm: Relation to KypForm model.
        ▪ documentType: KypDocumentType enum (e.g., GOVERNMENT_ID, PROOF_OF_ADDRESS).
        ▪ fileUrl: Secure URL to the stored document file.
        ▪ fileName: Original file name.
        ▪ uploadedAt: Timestamp of upload.
        ▪ createdAt, updatedAt: Timestamps. This model directly supports the user story to upload necessary documents (e.g., government ID, proof of address, business registration) for the KYP form securely.
• SecurityReport
    ◦ Purpose: Represents a security report filed by a partner for suspicious activity or breaches.
    ◦ Attributes:
        ▪ id: Unique identifier.
        ▪ homeownerId: Foreign key to User (the homeowner).
        ▪ homeowner: Relation to User model.
        ▪ type: SecurityReportType enum (e.g., SecurityBreach, SuspiciousActivity).
        ▪ description: Detailed description of the incident.
        ▪ reportedAt: Timestamp when the report was made.
        ▪ status: Current status of the report (e.g., "OPEN", "RESOLVED").
        ▪ createdAt, updatedAt: Timestamps. This model supports the user story to report any suspected security breaches or suspicious activity immediately so Booking.com can quickly protect the account and guest data